name: Run tests and lint
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            
  deploy:
    name: Deploy on AWS
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - run: |
          echo "HOST=${{ secrets.HOST }}" > .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_NAME=${{ secrets.POSTGRES_NAME }}" >> .env
          echo "TEST_DB_USER=${{ secrets.TEST_DB_USER }}" >> .env
          echo "TEST_DB_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}" >> .env
          echo "TEST_DB_HOST=${{ secrets.TEST_DB_HOST }}" >> .env
          echo "TEST_DB_PORT=${{ secrets.TEST_DB_PORT }}" >> .env
          echo "TEST_DB_NAME=${{ secrets.TEST_DB_NAME }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "REDIS_DB=${{ secrets.REDIS_DB }}" >> .env
          echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env
          echo "AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}" >> .env
          echo "AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}" >> .env
          echo "AUTH0_IDENTIFIER=${{ secrets.AUTH0_IDENTIFIER }}" >> .env
          echo "AUTH0_ISSUER=${{ secrets.AUTH0_ISSUER }}" >> .env
          echo "AUTH0_ALGORITHMS=${{ secrets.AUTH0_ALGORITHMS }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_ALGORITHMS=${{ secrets.JWT_ALGORITHMS }}" >> .env
          echo "SERVER_IP=${{ secrets.SERVER_IP }}" >> .env
          echo "SERVER_USER=${{ secrets.SERVER_USER }}" >> .env
          echo "SERVER_SSH_KEY=${{ secrets.SERVER_SSH_KEY }}" >> .env
    
      - name: Copy .env file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: ".env"
          target: "/tmp/meduzzen-intership"
      - uses: actions/checkout@v2
    
    
      - name: Build Docker image
        run: docker build app/ -t meduzzen-intership:latest
  
      - name: Save Docker image
        run: docker save meduzzen-intership:latest | gzip > meduzzen-intership.tar.gz
  
      - name: Copy Docker image to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "meduzzen-intership.tar.gz"
          target: "/tmp/meduzzen-intership"

      - name: Deploy Docker image on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            sudo docker load < /tmp/meduzzen-intership/meduzzen-intership.tar.gz
            docker stop meduzzen-intership || true
            docker rm meduzzen-intership || true
            sudo docker run -d \
            --restart unless-stopped \
            --env-file /tmp/meduzzen-intership/.env \
            --name meduzzen-intership \
            -p 8000:8000 \
            --network network \
            meduzzen-intership:latest
    
        
            
    
      
